name: IaC static analysis 

on:
  workflow_call:
    inputs:
      profile:
        description: "The AWS profile to use (from the config) throughout the workflow"
        required: true
        type: string
      workspaces:
        description: "A JSON Array that contains list of all workspaces to plan."
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: "The AWS Access Key ID for writing to the backend and managing resources."
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "The AWS Secret Access Key for writing to the backend and managing resources."
        required: true
      GITHUB_PAT:
        description: "A GitHub PAT used to initialize private submodules"
        required: true

jobs:
  iac-static-analysis:
    name: "Run static analysis"
    runs-on: ubuntu-latest
    env:
      AWS_SHARED_CREDENTIALS_FILE: /tmp/ac
      AWS_PROFILE: ${{ inputs.profile }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(inputs.workspaces) }}
    steps:
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          ref: ${{ steps.load-pr.outputs.head_sha }}
          token: ${{ secrets.GITHUB_PAT }} 
      
      - name: Setup Git Config
        run: |
          git config --global \
            url."https://oauth2:${{ secrets.GITHUB_PAT }}@github.com".insteadOf https://github.com

      - name: Setup AWS credentials
        run: |
          cat <<EOF >> "$AWS_SHARED_CREDENTIALS_FILE"
          [${{ inputs.profile }}]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - name: Set varfile
        id: tfvars
        run: |
          # Construct tfvars pattern
          # TODO: allow for optional override?
          echo "::set-output name=tfvar_file::tfvars/${{ inputs.profile }}/${{ matrix.workspace }}.tfvars"

      - name: Set terraform version
        id: set-terraform-version
        run: echo "::set-output name=terraform-version::$(cat .terraform-version)"

      - name: Set terraform workspace
        run: echo TF_WORKSPACE="${{ matrix.workspace }}" >> $GITHUB_ENV

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform-version}}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: |
          # TODO: Allow for optional override
          backend_file=backend/${{ inputs.profile }}.tfvars
          echo "::set-output name=backend_file::$backend_file"
          terraform init -backend-config "$backend_file"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          set -x
          export prefix="::set-output name=exitcode::"
          bash -c '(terraform plan -no-color \
            -detailed-exitcode \
            -var-file ${{ steps.init.outputs.backend_file }} \
            -var-file ${{ steps.tfvars.outputs.tfvar_file }} \
            -out terraform-${{ matrix.workspace }}.plan 2> terraform-${{ matrix.workspace }}-stderr.txt \
            && echo "${prefix}${?}") || echo "${prefix}${?}"'
          cat terraform-${{ matrix.workspace }}-stderr.txt
          terraform show -no-color terraform-${{ matrix.workspace }}.plan > terraform-${{ matrix.workspace }}.txt
          terraform show -json terraform-${{ matrix.workspace }}.plan > plan.json 
        continue-on-error: false

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        if: steps.plan.outcome == 'success'
        with:
          directory: .
          quiet: true 
          framework: terraform_plan
          output_format: github_failed_only
          
      - name: Display Checkov results
        id: report_success
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const output = `#### Static Analysis - No issues found :white_check_mark:

            *Pusher: @${{ github.actor }}, Workspace: \`${{ matrix.workspace }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Display Checkov failed results
        id: report_failures
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const output = `#### Static Analysis - Issues found :warning:
          
            <details><summary>Show Checkov results</summary>

            ${{ env.CHECKOV_RESULTS }}

            </details>

            *Pusher: @${{ github.actor }}, Workspace: \`${{ matrix.workspace }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
