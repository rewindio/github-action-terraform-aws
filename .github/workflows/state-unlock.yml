name: Terraform State Unlock

on:
  workflow_call:
    inputs:
      profile:
        description: "The AWS profile to use (from the config) throughout the workflow"
        required: true
        type: string
      workspaces:
        description: "A JSON Array that contains list of all workspaces to attempt to unlock."
        required: true
        type: string
      lock_id:
        description: "The lock id provided in the terraform error"
        required: true
        type: string
      terraform_dir:
        description: "The path to the terraform files"
        required: false
        type: string
        default: .
      runs_on:
        description: "The host to run on"
        required: false
        type: string
        default: "ubuntu-latest"
    secrets:
      AWS_ACCESS_KEY_ID:
        description: "The AWS Access Key ID for writing to the backend and managing resources."
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "The AWS Secret Access Key for writing to the backend and managing resources."
        required: true
      GITHUB_PAT:
        description: "A GitHub PAT used to initialize private submodules"
        required: true

jobs:
  terraform-state-unlock:
    name: "State unlock"
    runs-on: ${{ inputs.runs_on }}
    env:
      AWS_SHARED_CREDENTIALS_FILE: /tmp/ac
      AWS_PROFILE: ${{ inputs.profile }}
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(inputs.workspaces) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          token: ${{ secrets.GITHUB_PAT }} # Needed for private submodules

      # Allow private terraform modules to be initialized
      - name: Setup git config
        run: |
          git config --global \
            url."https://oauth2:${{ secrets.GITHUB_PAT }}@github.com".insteadOf https://github.com

      - name: Setup AWS credentials
        run: |
          cat <<EOF >> "$AWS_SHARED_CREDENTIALS_FILE"
          [${{ inputs.profile }}]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - name: Set terraform version
        id: set-terraform-version
        run: echo "::set-output name=terraform-version::$(cat ${{ inputs.terraform_dir }}/.terraform-version)"

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform-version}}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.terraform_dir }}
        run: |
          backend_file=backend/${{ inputs.profile }}.tfvars
          echo "::set-output name=backend_file::$backend_file"
          terraform init -backend-config "$backend_file"

      - name: Set terraform workspace
        run: echo TF_WORKSPACE="${{ matrix.workspace }}" >> $GITHUB_ENV

      - name: Terraform Force-unlock
        working-directory: ${{ inputs.terraform_dir }}
        run: |
          set -x
          terraform force-unlock -force ${{ inputs.lock_id }}

      - name: Cleanup AWS Credentials
        if: always()
        run: |
          rm -f "$AWS_SHARED_CREDENTIALS_FILE"
