name: Terraform Apply

on:
  workflow_call:
    inputs:
      profile:
        description: "The AWS profile to use (from the config) throughout the workflow"
        required: true
        type: string
      workspaces:
        description: "A JSON Array that contains list of all workspaces to apply."
        required: true
        type: string
      terraform_dir:
        description: "The path to the terraform files"
        required: false
        type: string
        default: .
      setup_script:
        description: "Additional setup to be run before apply (i.e. export TF_VAR_foo=bar)"
        required: false
        type: string
        default: ""
    secrets:
      AWS_ACCESS_KEY_ID:
        description: "The AWS Access Key ID for writing to the backend and managing resources."
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "The AWS Secret Access Key for writing to the backend and managing resources."
        required: true
      GITHUB_PAT:
        description: "A GitHub PAT used to initialize private submodules"
        required: true
      APPLY_FAILURES_SLACK_WEBHOOK_URL:
        description: "The Slack webhook url that maps to a Slack channel. This channel will be notified after a failed apply."
        required: false
      APPLY_SUCCESS_SLACK_WEBHOOK_URL:
        description: "The Slack webhook url that maps to a Slack channel. This channel will be notified after a successful apply."
        required: false
      LOOKUP_USER_EMAIL_SLACK_TOKEN:
        description: "A token to look up users by email and message them directly. This requires the GitHub & Slack email to match, and the 'Keep my email addresses private' option disabled. No failures occur in other cases."
        required: false

jobs:
  terraform-apply:
    name: "Apply"
    runs-on: ubuntu-latest
    env:
      AWS_SHARED_CREDENTIALS_FILE: /tmp/ac
      AWS_PROFILE: ${{ inputs.profile }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(inputs.workspaces) }}
    steps:

      - name: Check Mergeable State
        id: mergable
        run: |
          set -eu
          if [[ "${{ matrix.workspace }}" == "st"* ]]; then
            # Always allow an apply for a staging environment
            mergeable_state='clean'
          else
            resp=$(curl -sSf \
              --url ${{ github.event.issue.pull_request.url }} \
              --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
              --header 'content-type: application/json')
            mergeable_state=$(jq -r '.mergeable_state' <<< "$resp")
          fi
          echo "::set-output name=mergeable_state::$mergeable_state"

      - name: Set varfile
        id: tfvars
        run: |
          # Construct tfvars pattern
          echo "::set-output name=tfvar_file::tfvars/${{ inputs.profile }}/${{ matrix.workspace }}.tfvars"

      - name: Set terraform workspace
        run: echo TF_WORKSPACE="${{ matrix.workspace }}" >> $GITHUB_ENV

     # This step is needed because a comment on a PR is is in the scope of an issue
      - name: Load PR Details
        if: steps.mergable.outputs.mergeable_state == 'clean' && github.event.issue.pull_request 
        id: load-pr
        run: |
          set -eu
          resp=$(curl -sSf \
            --url ${{ github.event.issue.pull_request.url }} \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json')
          sha=$(jq -r '.head.sha' <<< "$resp")
          echo "::set-output name=head_sha::$sha"

      - name: Determine Command
        if: github.event.issue.pull_request 
        id: determine-command
        uses: actions/github-script@v6
        env:
          ENV_NAME: ${{ inputs.profile }}
        with:
          github-token: ${{github.token}}
          script: |
            const body = context.payload.comment.body.toLowerCase().trim()
            console.log("Detected PR comment: " + body)
            console.log("This job is for workspace " + process.env.TF_WORKSPACE)
            commandArray = body.split(/\s+/)
            if (commandArray[0] == "terraform") {
              action = commandArray[1]
              switch(action) {
                case "apply":
                  console.log("Validating apply action is for this job")
                  if(typeof commandArray[2] === 'undefined') {
                    console.log("Applying to all workspaces")
                    console.log("::set-output name=do_apply::true")
                  } else if (commandArray[2] == process.env.TF_WORKSPACE) {
                    console.log("applying to this workspace " + commandArray[2])
                    console.log("::set-output name=do_apply::true")
                  } else if (commandArray[2] == process.env.ENV_NAME) {
                    console.log("applying to this environment " + commandArray[2])
                    console.log("::set-output name=do_apply::true")
                  } else {
                    console.log("terraform apply command is not for this job")
                  }
                  break
              }
            }

      - name: Comment if not approved
        if: github.event.issue.pull_request && steps.mergable.outputs.mergeable_state != 'clean' && steps.determine-command.outputs.do_apply == 'true'
        id: unmergable_comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            :rotating_light: You cannot apply until the PR is both approved and ready to merge

            Workspace: `${{ env.TF_WORKSPACE }}`
          reactions: eyes

      - name: Checkout branch
        uses: actions/checkout@v2
        if: github.event.issue.pull_request 
        with:
          submodules: 'true'
          ref: ${{ steps.load-pr.outputs.head_sha }}
          token: ${{ secrets.GITHUB_PAT }} # Needed for private submodules

      - name: Checkout main
        uses: actions/checkout@v2
        if: ${{ !github.event.issue.pull_request }}
        with:
          submodules: 'true'
          token: ${{ secrets.GITHUB_PAT }} # Needed for private submodules

      # Allow for private terraform modules to be initialized
      - name: Setup Git Config
        run: |
          git config --global \
            url."https://oauth2:${{ secrets.GITHUB_PAT }}@github.com".insteadOf https://github.com

      - name: Setup AWS credentials
        run: |
          cat <<EOF >> "$AWS_SHARED_CREDENTIALS_FILE"
          [${{ inputs.profile }}]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - name: Set terraform version
        id: set-terraform-version
        run: echo "::set-output name=terraform-version::$(cat .terraform-version)"

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform-version}}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.terraform_dir }}
        run: |
          backend_file=backend/${{ inputs.profile }}.tfvars
          echo "::set-output name=backend_file::$backend_file"
          terraform init -backend-config "$backend_file"

      - name: Terraform Apply
        id: apply
        working-directory: ${{ inputs.terraform_dir }}
        if: (steps.mergable.outputs.mergeable_state == 'clean' && steps.determine-command.outputs.do_apply == 'true') || !github.event.issue.pull_request
        run: |
          set -xo pipefail
          ${{ inputs.setup_script }}
          terraform apply -no-color -var-file ${{ steps.init.outputs.backend_file }} -var-file ${{ steps.tfvars.outputs.tfvar_file }} -auto-approve |& tee terraform-${{ env.TF_WORKSPACE }}-apply-stdout.txt

      - name: Display terraform apply results
        uses: actions/github-script@v6
        if: always() && github.event.issue.pull_request && steps.mergable.outputs.mergeable_state == 'clean' && steps.determine-command.outputs.do_apply == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const apply = fs.readFileSync("${{ inputs.terraform_dir }}/terraform-${{ env.TF_WORKSPACE }}-apply-stdout.txt").toString();
            const output = `#### Terraform Apply \`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>

            \`\`\`terraform\n
            ${ apply }
            \`\`\`

            </details>

            Workspace: \`${{ env.TF_WORKSPACE }}\`
            `
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Set secrets
        # Allows for conditionals on secrets without exposing them
        # https://github.com/actions/runner/issues/520 
        id: secrets
        run: |
          echo '::set-output name=APPLY_SUCCESS_SLACK_WEBHOOK_URL::${{secrets.APPLY_SUCCESS_SLACK_WEBHOOK_URL}}'
          echo '::set-output name=APPLY_FAILURES_SLACK_WEBHOOK_URL::${{secrets.APPLY_FAILURES_SLACK_WEBHOOK_URL}}'
          echo '::set-output name=LOOKUP_USER_EMAIL_SLACK_TOKEN::${{secrets.LOOKUP_USER_EMAIL_SLACK_TOKEN}}'

      - name: Set commit title
        # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
        continue-on-error: true
        # We take the first line (%s) from the git log and then escape out any single quotes
        # https://stackoverflow.com/a/24247870
        run: echo COMMIT_MESSAGE=$(git log -n 1 --pretty=format:%s) >> $GITHUB_ENV

      - name: Notify Slack on Success
        uses: ravsamhq/notify-slack-action@v1
        if: always() && ${{ steps.secrets.outputs.APPLY_SUCCESS_SLACK_WEBHOOK_URL != '' }}
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{emoji} <{run_url}|Apply> to ${{ matrix.workspace }} has {status_message}'
          message_format: >
            ${{ github.actor }} pushed <{commit_url}|${{ env.COMMIT_MESSAGE }}>
          footer: '<{repo_url}|{repo}>'
          notify_when: 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.APPLY_SUCCESS_SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        uses: ravsamhq/notify-slack-action@v1
        if: always() && ${{ steps.secrets.outputs.APPLY_FAILURES_SLACK_WEBHOOK_URL != '' }}
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{emoji} <{run_url}|Apply> to ${{ matrix.workspace }} has {status_message}'
          message_format: >
            ${{ github.actor }} pushed <{commit_url}|${{ env.COMMIT_MESSAGE }}>
          footer: '<{repo_url}|{repo}>'
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.APPLY_FAILURES_SLACK_WEBHOOK_URL }}

      - name: Find Slack user
        if: failure() && ${{ steps.secrets.outputs.LOOKUP_USER_EMAIL_SLACK_TOKEN != '' }}
        id: find-slack-user
        uses: scribd/find-slack-user-action@v1
        with:
          include-at-symbol: true
          slack-token: ${{ secrets.LOOKUP_USER_EMAIL_SLACK_TOKEN }}

      - name: Send a Slack DM to the user linking the failure
        if: failure() && ${{ steps.secrets.outputs.LOOKUP_USER_EMAIL_SLACK_TOKEN != '' }}
        uses: archive/github-actions-slack@v2.2.1
        with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.LOOKUP_USER_EMAIL_SLACK_TOKEN }}
          slack-channel: "${{ steps.find-slack-user.outputs.username }}"
          slack-text: |
            <@${{ steps.find-slack-user.outputs.member-id }}>: <${{ env.RUN_URL }}|${{ env.COMMIT_MESSAGE }}> has failed.
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Cleanup AWS Credentials
        if: always()
        run: |
          rm -f "$AWS_SHARED_CREDENTIALS_FILE"
